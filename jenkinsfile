pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-Hub-credentials')
        DOCKER_IMAGE_NAME = 'johnsami/dockerized-app-build-app'
        DOCKER_IMAGE_TAG = 'latest'
        EMAIL_RECIPIENTS = 'johnhana567@gmail.com, khalid.salman1996@gmail.com, andrewadel3322@gmail.com, mostafa777444333@gmail.com'
    }

    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/johnsamey/DEPI-Project.git', branch: 'master', credentialsId: 'github'
            }
        }

        stage('Prepare Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    
                    # Check if the Docker image exists
                    IMAGE_EXISTS=$(docker images -q $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG)
                    
                    if [ -n "$IMAGE_EXISTS" ]; then
                        echo "Docker image exists. Deleting existing image..."
                        docker rmi $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
                    else
                        echo "Docker image does not exist. Proceeding to build a new image..."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    docker compose build
                    docker tag $DOCKER_IMAGE_NAME $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script{
                    sh '''
                    cd $WORKSPACE
                    docker compose run --rm app python tests/test.py
                    '''
                }
            }
        }

        stage('Push to Docker-Hub') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    echo "$DOCKER_HUB_CREDENTIALS_PSW" | docker login -u "$DOCKER_HUB_CREDENTIALS_USR" --password-stdin
                    docker compose push
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh ''' 
                    cd $WORKSPACE
                    ansible-playbook ../Deployment/playbook.yml -i ../inventory.ini --private-key ../private_key.pem --ssh-extra-args '-o StrictHostKeyChecking=no'
                    '''
                }
            }
        }
    }

    // triggers {
    //     pollSCM('H/5 * * * *') // Poll GitHub every 5 minutes
    // }
    post {
        // success {
        //     mail to: "${EMAIL_RECIPIENTS}",
        //          subject: "✅ Build Successful: ${JOB_NAME} - Build #${BUILD_NUMBER}",
        //          body: """<p>Good news! The build was successful.</p>
        //                   <p><strong>Job:</strong> ${JOB_NAME}</p>
        //                   <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
        //                   <p>Check the details at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
        //          mimeType: 'text/html'
        //         //  attachLog: true
        // }

        failure {
            mail to: "${EMAIL_RECIPIENTS}",
                 subject: "❌ Build Failed: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                 body: """<p>Oops! The build has failed.</p>
                          <p><strong>Job:</strong> ${JOB_NAME}</p>
                          <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                          <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                 mimeType: 'text/html'
                //  attachLog: true
        }

        unstable {
            mail to: "${EMAIL_RECIPIENTS}",
                 subject: "⚠️ Build Unstable: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                 body: """<p>The build is unstable.</p>
                          <p><strong>Job:</strong> ${JOB_NAME}</p>
                          <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                          <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                 mimeType: 'text/html'
                //  attachLog: true
        }
    }
}
